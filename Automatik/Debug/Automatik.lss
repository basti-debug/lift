
Automatik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000003b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000742  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000428  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000101  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001b71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  8a:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_2>:
volatile unsigned char direction=0;	//Bit für die Richtung, 2=Aufwärts/1=Abwärts/0=Stillstand
volatile unsigned int heightticks=1000;	//Zählvariable für die Höhe, bzw. die Umdrehungen des Motors
volatile unsigned char stockwerk=0;	//Variable für das aktuelle Stockwerk

ISR(INT1_vect)		//Wird bei fallender Flanke an PD3 ausgeführt
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	switch(heightticks){		//Stockwerk nach den Heightticks setzen
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a8:	8d 31       	cpi	r24, 0x1D	; 29
  aa:	91 05       	cpc	r25, r1
  ac:	41 f0       	breq	.+16     	; 0xbe <__vector_2+0x2c>
  ae:	89 33       	cpi	r24, 0x39	; 57
  b0:	91 05       	cpc	r25, r1
  b2:	49 f0       	breq	.+18     	; 0xc6 <__vector_2+0x34>
  b4:	89 2b       	or	r24, r25
  b6:	51 f4       	brne	.+20     	; 0xcc <__vector_2+0x3a>
		case Stock0: stockwerk=0; break;
  b8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <__vector_2+0x3a>
		case Stock1: stockwerk=1; break;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  c4:	03 c0       	rjmp	.+6      	; 0xcc <__vector_2+0x3a>
		case Stock2: stockwerk=2; break;
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		default: break;
	}
	
	if (direction==2)	//Falls nach oben gefahren wird
  cc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <direction>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	49 f4       	brne	.+18     	; 0xe6 <__vector_2+0x54>
	{
		heightticks++;	//Zählvariable erhöhen
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if (direction==1)	//Falls nach unten gefahren wird
  e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <direction>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	49 f4       	brne	.+18     	; 0x100 <__vector_2+0x6e>
	{
		heightticks--;	//Zahlvariable decreasen
  ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	//_delay_ms(10);		//Entprellen
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_9>:

ISR(TIMER0_OVF_vect){		//Wird beim Overflow des Timers aufgerufen
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
	if (direction==2){		//Wenn aufwärts gefahren wird
 11a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <direction>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	19 f4       	brne	.+6      	; 0x128 <__vector_9+0x1a>
		PORTC&=~(DOWN);	//Bitweise invertieren um zwischen Brems und Aufwärtsfahren zu wechseln
 122:	85 b3       	in	r24, 0x15	; 21
 124:	8f 7b       	andi	r24, 0xBF	; 191
 126:	85 bb       	out	0x15, r24	; 21
	}
	if (direction==1){		//Wenn abwärts gefahren wird
 128:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <direction>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	19 f4       	brne	.+6      	; 0x136 <__vector_9+0x28>
		PORTC&=~(UP);	//Bitweise invertieren um zwischen Brems und Aufwärtsfahren zu wechseln
 130:	85 b3       	in	r24, 0x15	; 21
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	85 bb       	out	0x15, r24	; 21
	}
	if (direction==0){		//Wenn der Lift steht
 136:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <direction>
 13a:	81 11       	cpse	r24, r1
 13c:	03 c0       	rjmp	.+6      	; 0x144 <__vector_9+0x36>
		PORTC|=BRAKE;			//Bremsen
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	80 66       	ori	r24, 0x60	; 96
 142:	85 bb       	out	0x15, r24	; 21
	}
}
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_19>:

ISR(TIMER0_COMP_vect){		//Wird aufgerufen wenn der Timer OCR0 erreicht
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
	if (direction==2){		//Wenn aufwärts gefahren wird
 15c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <direction>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	19 f4       	brne	.+6      	; 0x16a <__vector_19+0x1a>
		PORTC|=(DOWN);	//Bitweise invertieren um zwischen Brems und Aufwärtsfahren zu wechseln
 164:	85 b3       	in	r24, 0x15	; 21
 166:	80 64       	ori	r24, 0x40	; 64
 168:	85 bb       	out	0x15, r24	; 21
	}
	if (direction==1){		//Wenn abwärts gefahren wird
 16a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <direction>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	19 f4       	brne	.+6      	; 0x178 <__vector_19+0x28>
		PORTC|=(UP);	//Bitweise invertieren um zwischen Brems und Aufwärtsfahren zu wechseln
 172:	85 b3       	in	r24, 0x15	; 21
 174:	80 62       	ori	r24, 0x20	; 32
 176:	85 bb       	out	0x15, r24	; 21
	}
	if (direction==0){		//Wenn der Lift steht
 178:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <direction>
 17c:	81 11       	cpse	r24, r1
 17e:	03 c0       	rjmp	.+6      	; 0x186 <__vector_19+0x36>
		PORTC|=BRAKE;			//Bremsen
 180:	85 b3       	in	r24, 0x15	; 21
 182:	80 66       	ori	r24, 0x60	; 96
 184:	85 bb       	out	0x15, r24	; 21
	}
}
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <read_ADC8>:

unsigned char read_ADC8(unsigned char kanal)
{
	unsigned char wert = 0;
	DDRA &= ~(1<<kanal);    //übergebener Kanal auf Eingang
 192:	9a b3       	in	r25, 0x1a	; 26
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	08 2e       	mov	r0, r24
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <read_ADC8+0xe>
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <read_ADC8+0xa>
 1a4:	20 95       	com	r18
 1a6:	29 23       	and	r18, r25
 1a8:	2a bb       	out	0x1a, r18	; 26
	ADCSRA &= ~(1<<ADATE); //Einzelwandlung
 1aa:	96 b1       	in	r25, 0x06	; 6
 1ac:	9f 7d       	andi	r25, 0xDF	; 223
 1ae:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);        //Hardwareteiler auf 128 setzen = 93,75kHz
 1b0:	96 b1       	in	r25, 0x06	; 6
 1b2:	97 60       	ori	r25, 0x07	; 7
 1b4:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= (1<<ADEN);    //ADC-Wandler einschalten
 1b6:	96 b1       	in	r25, 0x06	; 6
 1b8:	90 68       	ori	r25, 0x80	; 128
 1ba:	96 b9       	out	0x06, r25	; 6
	ADMUX |= (1<<ADLAR);    //Wandlungsergebniss linksbündig
 1bc:	97 b1       	in	r25, 0x07	; 7
 1be:	90 62       	ori	r25, 0x20	; 32
 1c0:	97 b9       	out	0x07, r25	; 7
	ADMUX &= (~(1<<MUX3) & (~(1<<MUX4)));    //MUX-Kanal einstellen: unipolar
 1c2:	97 b1       	in	r25, 0x07	; 7
 1c4:	97 7e       	andi	r25, 0xE7	; 231
 1c6:	97 b9       	out	0x07, r25	; 7
	ADMUX &= ~(1<<MUX0) & ~(1<<MUX1) & ~(1<<MUX2); //ADMUX kanäle rücksetzen
 1c8:	97 b1       	in	r25, 0x07	; 7
 1ca:	98 7f       	andi	r25, 0xF8	; 248
 1cc:	97 b9       	out	0x07, r25	; 7
	ADMUX |= kanal;        // ADMUX mit kanal verodern, somit die kanäle setzen
 1ce:	97 b1       	in	r25, 0x07	; 7
 1d0:	89 2b       	or	r24, r25
 1d2:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<REFS0);     // Referenz auf 5V
 1d4:	87 b1       	in	r24, 0x07	; 7
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);    //Wandlung starten
 1da:	86 b1       	in	r24, 0x06	; 6
 1dc:	80 64       	ori	r24, 0x40	; 64
 1de:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1<<ADSC)){;};        //Warten, solange Wandlung im Gange ist
 1e0:	36 99       	sbic	0x06, 6	; 6
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <read_ADC8+0x4e>
	wert = ADCH;                     //Wert ausgeben
 1e4:	85 b1       	in	r24, 0x05	; 5
	ADCSRA &= ~(1<<ADEN);    //Wandler ausschalten
 1e6:	96 b1       	in	r25, 0x06	; 6
 1e8:	9f 77       	andi	r25, 0x7F	; 127
 1ea:	96 b9       	out	0x06, r25	; 6
	return wert;            //ADC-Wert übergeben
}
 1ec:	08 95       	ret

000001ee <hallsensor>:

unsigned char hallsensor(){		//Gibt "1" zurück wenn der Lift am unteren Hallsensor steht, und "2" beim oberen Hallsensor, und "0" falls weder noch
	//Unterer Hall Sensor
	if (read_ADC8(HallKanalUnten)<=40)	{return 1;}		//Wenn der untere Hallsensor ausgelöst hat
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	0e 94 c9 00 	call	0x192	; 0x192 <read_ADC8>
 1f4:	89 32       	cpi	r24, 0x29	; 41
 1f6:	28 f0       	brcs	.+10     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
	
	//Oberer Hall Sensor
	//if (read_ADC8(HallKanalOben)<=50)	{return 2;}		//Wenn der obere Hallsensor ausgelöst hat
	
	else if ((read_ADC8(HallKanalUnten)>=100))	{return 0;}	//Wenn beide nicht ausgelöst haben
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	0e 94 c9 00 	call	0x192	; 0x192 <read_ADC8>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
	return wert;            //ADC-Wert übergeben
}

unsigned char hallsensor(){		//Gibt "1" zurück wenn der Lift am unteren Hallsensor steht, und "2" beim oberen Hallsensor, und "0" falls weder noch
	//Unterer Hall Sensor
	if (read_ADC8(HallKanalUnten)<=40)	{return 1;}		//Wenn der untere Hallsensor ausgelöst hat
 202:	81 e0       	ldi	r24, 0x01	; 1
	//Oberer Hall Sensor
	//if (read_ADC8(HallKanalOben)<=50)	{return 2;}		//Wenn der obere Hallsensor ausgelöst hat
	
	else if ((read_ADC8(HallKanalUnten)>=100))	{return 0;}	//Wenn beide nicht ausgelöst haben
	return 0;	//Fehlerhafte Messung
}
 204:	08 95       	ret

00000206 <AufzugFahren>:

void AufzugFahren(unsigned char zielstockwerk){
	
	switch(heightticks){		//Stockwerk nach den Heightticks setzen
 206:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 20e:	2d 31       	cpi	r18, 0x1D	; 29
 210:	31 05       	cpc	r19, r1
 212:	41 f0       	breq	.+16     	; 0x224 <AufzugFahren+0x1e>
 214:	29 33       	cpi	r18, 0x39	; 57
 216:	31 05       	cpc	r19, r1
 218:	49 f0       	breq	.+18     	; 0x22c <AufzugFahren+0x26>
 21a:	23 2b       	or	r18, r19
 21c:	51 f4       	brne	.+20     	; 0x232 <AufzugFahren+0x2c>
		case Stock0: stockwerk=0; break;
 21e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 222:	07 c0       	rjmp	.+14     	; 0x232 <AufzugFahren+0x2c>
		case Stock1: stockwerk=1; break;
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
 22a:	03 c0       	rjmp	.+6      	; 0x232 <AufzugFahren+0x2c>
		case Stock2: stockwerk=2; break;
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
		default: break;
	}
	
	if (stockwerk>zielstockwerk){
 232:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 236:	89 17       	cp	r24, r25
 238:	80 f4       	brcc	.+32     	; 0x25a <AufzugFahren+0x54>
		heightticks -=1;
 23a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 23e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 242:	21 50       	subi	r18, 0x01	; 1
 244:	31 09       	sbc	r19, r1
 246:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 24a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
 24e:	05 c0       	rjmp	.+10     	; 0x25a <AufzugFahren+0x54>
	}
	
	while (stockwerk>zielstockwerk)	//Wenn das aktuelle Stockwerk über dem Zielstockwerk liegt e.g. Aktuell: 1 Ziel:0
	{
		direction=1;
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <direction>
		OCR0=80;
 256:	90 e5       	ldi	r25, 0x50	; 80
 258:	9c bf       	out	0x3c, r25	; 60
	
	if (stockwerk>zielstockwerk){
		heightticks -=1;
	}
	
	while (stockwerk>zielstockwerk)	//Wenn das aktuelle Stockwerk über dem Zielstockwerk liegt e.g. Aktuell: 1 Ziel:0
 25a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 25e:	89 17       	cp	r24, r25
 260:	b8 f3       	brcs	.-18     	; 0x250 <AufzugFahren+0x4a>
 262:	05 c0       	rjmp	.+10     	; 0x26e <AufzugFahren+0x68>
		direction=1;
		OCR0=80;
	}
	while (stockwerk<zielstockwerk)	//Wenn das aktuelle Stockwerk unter dem Zielstockwerk liegt
	{
		direction=2;
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <direction>
		OCR0=220;
 26a:	9c ed       	ldi	r25, 0xDC	; 220
 26c:	9c bf       	out	0x3c, r25	; 60
	while (stockwerk>zielstockwerk)	//Wenn das aktuelle Stockwerk über dem Zielstockwerk liegt e.g. Aktuell: 1 Ziel:0
	{
		direction=1;
		OCR0=80;
	}
	while (stockwerk<zielstockwerk)	//Wenn das aktuelle Stockwerk unter dem Zielstockwerk liegt
 26e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 272:	98 17       	cp	r25, r24
 274:	b8 f3       	brcs	.-18     	; 0x264 <AufzugFahren+0x5e>
	{
		direction=2;
		OCR0=220;
	}
	direction=0;
 276:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <direction>
 27a:	08 95       	ret

0000027c <tasterabfrage>:
}
//Gibt beim gedrücktem Taster die Nummer zurück. Falls keiner gedrückt ist "3"
unsigned char tasterabfrage(){ 
	
	if (!(PINA&0x01)) {			//Taster S0		Erdgeschoss anfahren
 27c:	99 b3       	in	r25, 0x19	; 25
 27e:	89 2f       	mov	r24, r25
 280:	81 70       	andi	r24, 0x01	; 1
 282:	90 ff       	sbrs	r25, 0
 284:	0a c0       	rjmp	.+20     	; 0x29a <tasterabfrage+0x1e>
		return 0;
	}
	else if (!(PINA&0x02)) {	//Taster S1		1. Stock anfahren
 286:	c9 9b       	sbis	0x19, 1	; 25
 288:	05 c0       	rjmp	.+10     	; 0x294 <tasterabfrage+0x18>
		return 1;
	}
	else if (!(PINA&0x04)){		//Taster S2		2. Stock anfahren
 28a:	ca 9b       	sbis	0x19, 2	; 25
 28c:	05 c0       	rjmp	.+10     	; 0x298 <tasterabfrage+0x1c>
		return 2;
	}
	else if (!(PINA&0x08)){		//Taster S3
 28e:	89 b3       	in	r24, 0x19	; 25
	}
	return 3;
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	08 95       	ret
	
	if (!(PINA&0x01)) {			//Taster S0		Erdgeschoss anfahren
		return 0;
	}
	else if (!(PINA&0x02)) {	//Taster S1		1. Stock anfahren
		return 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	08 95       	ret
	}
	else if (!(PINA&0x04)){		//Taster S2		2. Stock anfahren
		return 2;
 298:	82 e0       	ldi	r24, 0x02	; 2
	}
	else if (!(PINA&0x08)){		//Taster S3
	}
	return 3;
}
 29a:	08 95       	ret

0000029c <main>:
int main(void)
{
	//IOs konfigurieren
	#pragma region
		DDRC=0xff;		//C-Register auf Ausgang setzen (LEDs, Motortreiber)
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	84 bb       	out	0x14, r24	; 20
		PORTC=0x00;		//Alle Ausgänge im C-Register LOW setzen
 2a0:	15 ba       	out	0x15, r1	; 21
		DDRA=0x00;		//A-Register auf Eingang setzen (Taster)
 2a2:	1a ba       	out	0x1a, r1	; 26
		PORTA=0x07;		//Pullups für S0...S4 einschalten
 2a4:	87 e0       	ldi	r24, 0x07	; 7
 2a6:	8b bb       	out	0x1b, r24	; 27
		DDRD=0x00;				//DDR-D auf Eingang
 2a8:	11 ba       	out	0x11, r1	; 17
		PORTD=(1<<PD3);			//Pullup für INT1-Pin
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	82 bb       	out	0x12, r24	; 18
	#pragma endregion
	
	//Interrupt 0 konfigurieren
	#pragma region Interrupt-Config
	GICR|=(1<<INT1);		//INT1 freigeben
 2ae:	8b b7       	in	r24, 0x3b	; 59
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	8b bf       	out	0x3b, r24	; 59
	MCUCR|=(1<<ISC11);		//INT1 falling edge
 2b4:	85 b7       	in	r24, 0x35	; 53
 2b6:	88 60       	ori	r24, 0x08	; 8
 2b8:	85 bf       	out	0x35, r24	; 53
	MCUCR&=~(1<<ISC10);		//INT1 falling edge
 2ba:	85 b7       	in	r24, 0x35	; 53
 2bc:	8b 7f       	andi	r24, 0xFB	; 251
 2be:	85 bf       	out	0x35, r24	; 53
	#pragma endregion Interrupt-Config
	
	//Timer0 konfigurieren
	#pragma region Timer0-Config
	TCCR0|=(1<<CS02)|(1<<CS00);		//Timer0 Systemtakt/1024
 2c0:	83 b7       	in	r24, 0x33	; 51
 2c2:	85 60       	ori	r24, 0x05	; 5
 2c4:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0)|(1<<OCIE0);		//Overflow und Match Interrupt freigeben
 2c6:	89 b7       	in	r24, 0x39	; 57
 2c8:	83 60       	ori	r24, 0x03	; 3
 2ca:	89 bf       	out	0x39, r24	; 57
	TCCR0|=(1<<WGM01)|(1<<WGM00);		//FastPWM
 2cc:	83 b7       	in	r24, 0x33	; 51
 2ce:	88 64       	ori	r24, 0x48	; 72
 2d0:	83 bf       	out	0x33, r24	; 51
	OCR0=230;
 2d2:	86 ee       	ldi	r24, 0xE6	; 230
 2d4:	8c bf       	out	0x3c, r24	; 60
	#pragma endregion Timer0-Config
	
	sei();					//Interrupt global freigeben
 2d6:	78 94       	sei
	
	//Am Start ins Erdgeschoss fahren, da der Anfangszustand sonst unbekannt ist
	while (hallsensor()!=1)
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <main+0x44>
	{
		direction=2;
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <direction>
	#pragma endregion Timer0-Config
	
	sei();					//Interrupt global freigeben
	
	//Am Start ins Erdgeschoss fahren, da der Anfangszustand sonst unbekannt ist
	while (hallsensor()!=1)
 2e0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <hallsensor>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	c9 f7       	brne	.-14     	; 0x2da <main+0x3e>
	{
		direction=2;
	}
	direction=0;
 2e8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <direction>
	heightticks=0;		//Heightticks nullen, da der Aufzug jetzt sicher im Erdgeschoss steht
 2ec:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
    while (1) //Arbeitsschleife
    {
		switch(tasterabfrage()){		//Stockwerk nach den Heightticks setzen
 2f4:	0e 94 3e 01 	call	0x27c	; 0x27c <tasterabfrage>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	41 f0       	breq	.+16     	; 0x30c <main+0x70>
 2fc:	18 f0       	brcs	.+6      	; 0x304 <main+0x68>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	49 f0       	breq	.+18     	; 0x314 <main+0x78>
 302:	f8 cf       	rjmp	.-16     	; 0x2f4 <main+0x58>
			case 0: AufzugFahren(0); break;
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 03 01 	call	0x206	; 0x206 <AufzugFahren>
 30a:	f4 cf       	rjmp	.-24     	; 0x2f4 <main+0x58>
			case 1: AufzugFahren(1); break;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 03 01 	call	0x206	; 0x206 <AufzugFahren>
 312:	f0 cf       	rjmp	.-32     	; 0x2f4 <main+0x58>
			case 2: AufzugFahren(2); break;
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 03 01 	call	0x206	; 0x206 <AufzugFahren>
 31a:	ec cf       	rjmp	.-40     	; 0x2f4 <main+0x58>

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
